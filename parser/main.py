import json
import config
import functions
from database import Database
from keyboards import Keyboard
from parses import parse_handler
from vk_api import VkApi

vk_session = VkApi(token = config.token)
vk = vk_session.get_api()
db = Database()

def auto_parse():
    date = functions.return_today_date()
    peers = db.get_peers()                
    for chat in peers:
        parse_handler(vk, chat['peer_id'], 0, date, 'group', chat['group'], auto = True)   

def event_handler(peer_id, cmid):
    payload = db.get_note(peer_id)['last_payload']
    
    if payload['type'] == 'date_menu':
        subtype = payload['subtype']
        if subtype == 'student':
            subtext = '–≥—Ä—É–ø–ø—ã'
        elif subtype == 'teacher':
            subtext = '–ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è'
        elif subtype == 'auditory':
            subtext = '–∞—É–¥–∏—Ç–æ—Ä–∏–∏'

        text = '–•–æ—Ä–æ—à–æ, –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è ' + subtext + ', —Ç–µ–ø–µ—Ä—å –Ω—É–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –¥–∞—Ç—É. –í—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –º–Ω–æ–π' \
            ' –∏–ª–∏ –Ω–∞–∂–∞—Ç—å ¬´–î—Ä—É–≥–∞—è –¥–∞—Ç–∞¬ª –∏ –ø—Ä–∏—Å–ª–∞—Ç—å –º–Ω–µ –µ—ë —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ üôÇ'
        keyboard = Keyboard.init_date_menu(subtype)
        functions.edit_message(vk, peer_id, cmid, text, keyboard)

    elif payload['type'] == 'group_menu':
        if payload['date'] == 'chose_needed':
            functions.edit_message(vk, peer_id, cmid, '–ù–µ –ø–æ–Ω—Ä–∞–≤–∏–ª–∏—Å—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã–µ –¥–∞—Ç—ã? üòê\n–¢–æ–≥–¥–∞ –Ω–∞–ø–∏—à–∏—Ç–µ ¬´/osu {—Ç–≤–æ—è –¥–∞—Ç–∞}¬ª!')
        else:
            keyboard = Keyboard.init_group_menu(peer_id)
            text = f'–û–∫–µ–π, –≤—ã –≤—ã–±—Ä–∞–ª–∏ –¥–∞—Ç—É {payload["date"]}. –¢–µ–ø–µ—Ä—å –Ω—É–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –≥—Ä—É–ø–ø—É üôÇ'
            functions.edit_message(vk, peer_id, cmid, text, keyboard)
           
    elif payload['type'] == 'teacher_menu':
        if payload['date'] == 'chose_needed':
            functions.edit_message(vk, peer_id, cmid, '–ù–µ –ø–æ–Ω—Ä–∞–≤–∏–ª–∏—Å—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã–µ –¥–∞—Ç—ã? üòê\n–¢–æ–≥–¥–∞ –Ω–∞–ø–∏—à–∏—Ç–µ ¬´/osu {—Ç–≤–æ—è –¥–∞—Ç–∞}¬ª!')
        else:
            keyboard = Keyboard.init_teacher_menu(peer_id)
            text = f'–û–∫–µ–π, –≤—ã –≤—ã–±—Ä–∞–ª–∏ –¥–∞—Ç—É {payload["date"]}. –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è üôÇ'
            functions.edit_message(vk, peer_id, cmid, text, keyboard)

    elif payload['type'] == 'auditory_menu':
        if payload['date'] == 'chose_needed':
            functions.edit_message(vk, peer_id, cmid, '–ù–µ –ø–æ–Ω—Ä–∞–≤–∏–ª–∏—Å—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã–µ –¥–∞—Ç—ã? üòê\n–¢–æ–≥–¥–∞ –Ω–∞–ø–∏—à–∏—Ç–µ ¬´/osu {—Ç–≤–æ—è –¥–∞—Ç–∞}¬ª!')
        else:
            keyboard = Keyboard.init_auditory_menu(peer_id)
            text = f'–û–∫–µ–π, –≤—ã –≤—ã–±—Ä–∞–ª–∏ –¥–∞—Ç—É {payload["date"]}. –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –∞—É–¥–∏—Ç–æ—Ä–∏–∏ üôÇ'
            functions.edit_message(vk, peer_id, cmid, text, keyboard)

    elif payload['type'] == 'pre_result_menu':
        if 'group' in payload:
            if payload['group'] == 'chose_needed':
                functions.edit_message(vk, peer_id, cmid, '–ù–µ –ø–æ–Ω—Ä–∞–≤–∏–ª–∏—Å—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã–µ –≥—Ä—É–ø–ø—ã? –ù—É –∏ –ª–∞–¥–Ω–æ, –Ω–∞–ø–∏—à–∏—Ç–µ ¬´/osu {–Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã}¬ª üòê')
            else:
                db.create_note(chat_id = peer_id, last_cmid = cmid, last_payload = {'type': None})
                parse_handler(vk, peer_id, cmid, payload['date'], 'group', payload['group'])

        elif 'teacher' in payload:
            if payload['teacher'] == 'chose_needed':
                functions.edit_message(vk, peer_id, cmid, '–ù–µ –ø–æ–Ω—Ä–∞–≤–∏–ª–∏—Å—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏? –ù–∞–ø–∏—à–∏—Ç–µ ¬´/osu {—Ñ–∞–º–∏–ª–∏—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è}¬ª üòê')
            else:
                db.create_note(chat_id = peer_id, last_cmid = cmid, last_payload = {'type': None})
                parse_handler(vk, peer_id, cmid, payload['date'], 'teacher', payload['teacher'].split()[0])

        elif 'auditory' in payload:
            if payload['auditory'] == 'chose_needed':
                functions.edit_message(vk, peer_id, cmid, '–ù–µ –ø–æ–Ω—Ä–∞–≤–∏–ª–∏—Å—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã–µ –º–Ω–æ–π –∞—É–¥–∏—Ç–æ—Ä–∏–∏? –ù–∞–ø–∏—à–∏—Ç–µ ¬´/osu {–Ω–æ–º–µ—Ä –∞—É–¥–∏—Ç–æ—Ä–∏–∏}¬ª üòê')
            else:
                db.create_note(chat_id = peer_id, last_cmid = cmid, last_payload = {'type': None})
                parse_handler(vk, peer_id, cmid, payload['date'], 'auditory', payload['auditory'])

    elif payload['type'] == 'links':
        keyboard = Keyboard.init_links_menu()
        functions.edit_message(vk, peer_id, cmid, '–í —ç—Ç–æ–º —Ä–∞–∑–¥–µ–ª–µ –≤—ã –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—á–∫—É –∞–≤—Ç–æ—Ä–∞ –±–æ—Ç–∞ –∏–ª–∏ –æ—Ç–∫—Ä—ã—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –ø–æ –µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é üôÇ', keyboard)
        db.create_note(chat_id = peer_id, last_cmid = cmid, last_payload = {'type': 'links'})

    elif payload['type'] == 'settings_menu':
        settings = db.get_note(peer_id)['settings']

        if payload.get('subtype') == None:
            keyboard = Keyboard.init_settings_menu(peer_id)
            functions.edit_message(vk, peer_id, cmid, '–¢—É—Ç –≤—ã –º–æ–∂–µ—Ç–µ –≤–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∏ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏–µ –¥–ª—è –Ω–µ–≥–æ (–µ—Å–ª–∏ –±–æ—Ç –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –±–µ—Å–µ–¥–µ). –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –±—É–¥–µ—Ç –ø—Ä–∏—Å—ã–ª–∞—Ç—å—Å—è –≤ —Å—É–±–±–æ—Ç—É –≤ 8 —á–∞—Å–æ–≤ –≤–µ—á–µ—Ä–∞!', keyboard)
            db.create_note(chat_id = peer_id, last_cmid = cmid, last_payload = {'type': 'settings_menu'})

        elif payload.get('subtype') == 'swap_autopin':
            try:
                members = vk.messages.getConversationMembers(peer_id = peer_id)
            except:
                functions.send_message(vk, peer_id, '–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –∑–∞–∫—Ä–µ–ø–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è, –º–Ω–µ –Ω—É–∂–Ω—ã –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!')
                return
            
            settings['AutoPin'] = True if not settings['AutoPin'] else False
            db.create_note(chat_id = peer_id, last_cmid = cmid, last_payload = {'type': 'settings_menu'}, settings = settings)
            event_handler(peer_id, cmid)            

        elif payload.get('subtype') == 'swap_autosend':
            if payload.get('group', False):
                settings['Group'] = payload['group']
                settings['AutoSend'] = True if not settings['AutoSend'] else False
                db.create_note(chat_id = peer_id, last_cmid = cmid, last_payload = {'type': 'settings_menu'}, settings = settings)
                keyboard = Keyboard.init_settings_menu(peer_id)
                functions.edit_message(vk, peer_id, cmid, f'–ê–≤—Ç–æ—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ –¥–ª—è –≥—Ä—É–ø–ø—ã ¬´{payload["group"]}¬ª!', keyboard = keyboard)
                return
            
            if not settings['AutoSend']:
                keyboard = Keyboard.init_settings_menu(peer_id)
                functions.edit_message(vk, peer_id, cmid, '–û—Ç–ª–∏—á–Ω–æ, —Ç–µ–ø–µ—Ä—å –ø—Ä–∏—à–ª–∏—Ç–µ –º–Ω–µ –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è –∞–≤—Ç–æ—Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è - ¬´/osu {–Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã}¬ª!', keyboard = keyboard)
                db.create_note(chat_id = peer_id, last_cmid = cmid, last_payload = {'type': 'settings_menu', 'subtype': 'swap_autosend'})
                return
            else:
                settings['AutoSend'] = False
                db.create_note(chat_id = peer_id, last_cmid = cmid, last_payload = {'type': 'settings_menu'}, settings = settings)
                event_handler(peer_id, cmid)
                return

    elif payload['type'] == 'main_menu':
        keyboard = Keyboard.init_main_menu()
        functions.edit_message(vk, peer_id, cmid, '–ü—Ä–∏–≤–µ—Ç, —è –∑–∞–Ω–∏–º–∞—é—Å—å –≤–æ—Ä–æ–≤—Å—Ç–≤–æ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è —Å —Å–∞–π—Ç–∞ –∫–æ–ª–ª–µ–¥–∂–∞ :>\n–ö–∞–∫–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ?\n\nUpd. –ê–≤—Ç–æ—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ üôÇ', keyboard)
        db.create_note(chat_id = peer_id, last_cmid = cmid, last_payload = {'type': 'main_menu'})

def handle_process_event(event, context):
    if 'TimerMessage' in event['messages'][0]['event_metadata']['event_type']:
        auto_parse()
        return
    
    vk_request = json.loads(json.loads(event['messages'][0]['details']['message']['body'])['text']['body'])
    #print(vk_request)

    if vk_request['type'] == 'message_new':
        message_text = vk_request['object']['message']['text'].split()[1:]
        peer_id = vk_request['object']['message']['peer_id']
            
        if 'action' in vk_request['object']['message']:
            functions.send_message(vk, peer_id, '–ü—Ä–∏–≤–µ—Ç! –î–ª—è –º–æ–µ–π –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–¥–∞—Ç—å –º–Ω–µ –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞, –∞ —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –º–æ–µ –º–µ–Ω—é –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É ¬´/osu¬ª!')
            return

        elif not message_text:
            keyboard = Keyboard.init_main_menu()
            cmid = functions.send_message(vk, peer_id, '–ü—Ä–∏–≤–µ—Ç, —è –∑–∞–Ω–∏–º–∞—é—Å—å –≤–æ—Ä–æ–≤—Å—Ç–≤–æ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è —Å —Å–∞–π—Ç–∞ –∫–æ–ª–ª–µ–¥–∂–∞ :>\n–ö–∞–∫–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ?\n\nUpd. –ê–≤—Ç–æ—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ üôÇ', keyboard)
                    
            try:
                response = db.get_note(peer_id)
            except:
                db.create_note(chat_id = peer_id, start = True)
                response = db.get_note(peer_id)

            if len(response) < 7:
                db.create_note(chat_id = peer_id, start = True)

                db.create_note(chat_id = peer_id, last_cmid = cmid, last_payload = {'type': 'main_menu'})

        elif len(message_text) == 1:
            response = db.get_note(peer_id)
            group, teacher, auditory, date = [None] * 4

            if response['last_payload'].get('type', None) == None:
                return

            if message_text[0].isdigit():
                auditory = message_text[0]
            elif message_text[0].isalpha():
                teacher = message_text[0]
            else:
                if message_text[0].count('-') + message_text[0].count('/') + message_text[0].count('.') == 2:
                    if message_text[0].count('-') == 2:
                        for elem in message_text[0].split('-'):
                            if not elem.isdigit():
                                group = message_text[0].upper()   
                        
                        if group == None:        
                            date = functions.date_check(message_text[0])
                            if not date:
                                functions.edit_message(vk, peer_id, response['last_cmid'], '–í—ã –≤–≤–µ–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—É—é –¥–∞—Ç—É üòî')
                                return
                elif message_text[0].count('-') == 1:
                    group = message_text[0].upper()
                    
            if auditory != None:
                db.create_note(chat_id = peer_id, last_payload = {'type': response['last_payload']['type'], 'date': response['last_payload']['date'], 'auditory': auditory})
            if teacher != None:
                db.create_note(chat_id = peer_id, last_payload = {'type': response['last_payload']['type'], 'date': response['last_payload']['date'], 'teacher': teacher})
            if group != None:
                if response['last_payload']['type'] == 'settings_menu' and response['last_payload']['subtype'] == 'swap_autosend':
                    db.create_note(chat_id = peer_id, last_payload = {'type': 'settings_menu', 'subtype': 'swap_autosend', 'group': group})
                else:
                    db.create_note(chat_id = peer_id, last_payload = {'type': response['last_payload']['type'], 'date': response['last_payload']['date'], 'group': group})
            if date != None and date != False:
                db.create_note(chat_id = peer_id, last_payload = {'type': response['last_payload']['type'], 'date': date})
            event_handler(peer_id, response['last_cmid'])

    elif vk_request['type'] == 'message_event':
        if vk_request['object']['payload']['type'] == 'open_link':
            vk.messages.sendMessageEventAnswer(
                event_id = vk_request['object']['event_id'],
                user_id = vk_request['object']['user_id'],
                peer_id = vk_request['object']['peer_id'],
                event_data = json.dumps(vk_request['object']['payload'])
            )
            return

        db.create_note(chat_id = vk_request['object']['peer_id'], last_cmid = vk_request['object']['conversation_message_id'], last_payload = vk_request['object']['payload'])
        event_handler(vk_request['object']['peer_id'], vk_request['object']['conversation_message_id'])
